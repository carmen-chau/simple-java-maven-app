<!--Purpose of a pom.xml file: Is a blueprint that defines how this application should be packaged as a .jar file-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.fakeCompany.app</groupId> <!--Unique project ID of the company that made this project. Purpose: To avoid naming conflicts if projects have files with the same name-->
  <artifactId>sample-app</artifactId> <!--Unique project name that is used for jar naming. Jar naming: artifact ID + version name-->
  <packaging>jar</packaging> <!--Defining the packaging format-->
  <version>1.0-SNAPSHOT</version> <!--Defining the version of the project-->
  <name>sample-maven-app-v1</name> <!--This name section: Human-readable version of the project name-->
  <url>https://maven.apache.org</url>
  <!--The dependency section defines resources application needs to run. These resource are automatically downloaded from Maven's central repo-->
  <dependencies>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>5.12.2</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <!--Properties: Defining specific encoding to use when reading / writing files.-->
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>
  <build>
    <!--Plugin Management: Defines the default behaviours of plugins. Won't run if there isn't a plugin section defined-->
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.14.0</version>
          <configuration>
            <release>17</release>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
    <!-- This section defines plugins. Plugins are things that PERFORM tasks to complete a Maven build -->
    <plugins>
      <plugin>
        <!-- Build an executable JAR -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.4.2</version>
        <configuration>
          <archive>
            <manifest>
              <!-- Include classpath info in JAR manifest -->
              <addClasspath>true</addClasspath>
              <!-- Prefix for classpath entries, used when loading dependencies at runtime -->
              <classpathPrefix>lib/</classpathPrefix>
              <!-- Entry point (main method) of your application, so the JAR is executable -->
              <mainClass>com.fakeCompany.app.App</mainClass>
            </manifest>
          </archive>
        </configuration>
      </plugin>
      <!-- Maven Enforcer Plugin: Enforces rules like required Java/Maven versions -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>3.5.0</version>
        <executions>
          <execution>
            <id>enforce-maven</id>
            <goals>
              <goal>enforce</goal> <!-- Enforces rules before the build starts -->
            </goals>
            <configuration>
              <rules>
                <!-- Ensure the build is run with Maven 3.9.2 or newer -->
                <requireMavenVersion>
                  <version>[3.9.2,)</version>
                </requireMavenVersion>
                <!-- Ensure the project is built with Java 17 or newer -->
                <requireJavaVersion>
                  <version>[17,)</version>
                </requireJavaVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
